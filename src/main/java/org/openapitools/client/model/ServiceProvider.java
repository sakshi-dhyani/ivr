/*
 * SFC-IVR
 * SFC-IVR-apis
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.model;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.util.Arrays;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.openapitools.client.JSON;

/**
 * ServiceProvider
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-07-30T12:25:16.219394400+05:30[Asia/Calcutta]", comments = "Generator version: 7.7.0")
public class ServiceProvider {
  public static final String SERIALIZED_NAME_ACTIVE = "active";
  @SerializedName(SERIALIZED_NAME_ACTIVE)
  private byte[] active;

  public static final String SERIALIZED_NAME_ADDRESS = "address";
  @SerializedName(SERIALIZED_NAME_ADDRESS)
  private String address;

  public static final String SERIALIZED_NAME_CREATION_TIME = "creationTime";
  @SerializedName(SERIALIZED_NAME_CREATION_TIME)
  private Long creationTime;

  public static final String SERIALIZED_NAME_EMAIL = "email";
  @SerializedName(SERIALIZED_NAME_EMAIL)
  private String email;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Integer id;

  public static final String SERIALIZED_NAME_INITIAL_PASSWORD = "initialPassword";
  @SerializedName(SERIALIZED_NAME_INITIAL_PASSWORD)
  private String initialPassword;

  public static final String SERIALIZED_NAME_IS_EMAIL_VERIFIED = "isEmailVerified";
  @SerializedName(SERIALIZED_NAME_IS_EMAIL_VERIFIED)
  private byte[] isEmailVerified;

  public static final String SERIALIZED_NAME_IS_LOGGED_IN = "isLoggedIn";
  @SerializedName(SERIALIZED_NAME_IS_LOGGED_IN)
  private byte[] isLoggedIn;

  public static final String SERIALIZED_NAME_MODIFICATION_TIME = "modificationTime";
  @SerializedName(SERIALIZED_NAME_MODIFICATION_TIME)
  private Long modificationTime;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_PASSWORD = "password";
  @SerializedName(SERIALIZED_NAME_PASSWORD)
  private String password;

  public static final String SERIALIZED_NAME_UNIQUE_ID = "uniqueId";
  @SerializedName(SERIALIZED_NAME_UNIQUE_ID)
  private String uniqueId;

  public ServiceProvider() {
  }

  public ServiceProvider active(byte[] active) {
    this.active = active;
    return this;
  }

  /**
   * Get active
   * @return active
   */
  @javax.annotation.Nullable
  public byte[] getActive() {
    return active;
  }

  public void setActive(byte[] active) {
    this.active = active;
  }


  public ServiceProvider address(String address) {
    this.address = address;
    return this;
  }

  /**
   * Get address
   * @return address
   */
  @javax.annotation.Nullable
  public String getAddress() {
    return address;
  }

  public void setAddress(String address) {
    this.address = address;
  }


  public ServiceProvider creationTime(Long creationTime) {
    this.creationTime = creationTime;
    return this;
  }

  /**
   * Get creationTime
   * @return creationTime
   */
  @javax.annotation.Nullable
  public Long getCreationTime() {
    return creationTime;
  }

  public void setCreationTime(Long creationTime) {
    this.creationTime = creationTime;
  }


  public ServiceProvider email(String email) {
    this.email = email;
    return this;
  }

  /**
   * Get email
   * @return email
   */
  @javax.annotation.Nullable
  public String getEmail() {
    return email;
  }

  public void setEmail(String email) {
    this.email = email;
  }


  public ServiceProvider id(Integer id) {
    this.id = id;
    return this;
  }

  /**
   * Get id
   * @return id
   */
  @javax.annotation.Nullable
  public Integer getId() {
    return id;
  }

  public void setId(Integer id) {
    this.id = id;
  }


  public ServiceProvider initialPassword(String initialPassword) {
    this.initialPassword = initialPassword;
    return this;
  }

  /**
   * Get initialPassword
   * @return initialPassword
   */
  @javax.annotation.Nullable
  public String getInitialPassword() {
    return initialPassword;
  }

  public void setInitialPassword(String initialPassword) {
    this.initialPassword = initialPassword;
  }


  public ServiceProvider isEmailVerified(byte[] isEmailVerified) {
    this.isEmailVerified = isEmailVerified;
    return this;
  }

  /**
   * Get isEmailVerified
   * @return isEmailVerified
   */
  @javax.annotation.Nullable
  public byte[] getIsEmailVerified() {
    return isEmailVerified;
  }

  public void setIsEmailVerified(byte[] isEmailVerified) {
    this.isEmailVerified = isEmailVerified;
  }


  public ServiceProvider isLoggedIn(byte[] isLoggedIn) {
    this.isLoggedIn = isLoggedIn;
    return this;
  }

  /**
   * Get isLoggedIn
   * @return isLoggedIn
   */
  @javax.annotation.Nullable
  public byte[] getIsLoggedIn() {
    return isLoggedIn;
  }

  public void setIsLoggedIn(byte[] isLoggedIn) {
    this.isLoggedIn = isLoggedIn;
  }


  public ServiceProvider modificationTime(Long modificationTime) {
    this.modificationTime = modificationTime;
    return this;
  }

  /**
   * Get modificationTime
   * @return modificationTime
   */
  @javax.annotation.Nullable
  public Long getModificationTime() {
    return modificationTime;
  }

  public void setModificationTime(Long modificationTime) {
    this.modificationTime = modificationTime;
  }


  public ServiceProvider name(String name) {
    this.name = name;
    return this;
  }

  /**
   * Get name
   * @return name
   */
  @javax.annotation.Nullable
  public String getName() {
    return name;
  }

  public void setName(String name) {
    this.name = name;
  }


  public ServiceProvider password(String password) {
    this.password = password;
    return this;
  }

  /**
   * Get password
   * @return password
   */
  @javax.annotation.Nullable
  public String getPassword() {
    return password;
  }

  public void setPassword(String password) {
    this.password = password;
  }


  public ServiceProvider uniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
    return this;
  }

  /**
   * Get uniqueId
   * @return uniqueId
   */
  @javax.annotation.Nullable
  public String getUniqueId() {
    return uniqueId;
  }

  public void setUniqueId(String uniqueId) {
    this.uniqueId = uniqueId;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ServiceProvider serviceProvider = (ServiceProvider) o;
    return Arrays.equals(this.active, serviceProvider.active) &&
        Objects.equals(this.address, serviceProvider.address) &&
        Objects.equals(this.creationTime, serviceProvider.creationTime) &&
        Objects.equals(this.email, serviceProvider.email) &&
        Objects.equals(this.id, serviceProvider.id) &&
        Objects.equals(this.initialPassword, serviceProvider.initialPassword) &&
        Arrays.equals(this.isEmailVerified, serviceProvider.isEmailVerified) &&
        Arrays.equals(this.isLoggedIn, serviceProvider.isLoggedIn) &&
        Objects.equals(this.modificationTime, serviceProvider.modificationTime) &&
        Objects.equals(this.name, serviceProvider.name) &&
        Objects.equals(this.password, serviceProvider.password) &&
        Objects.equals(this.uniqueId, serviceProvider.uniqueId);
  }

  @Override
  public int hashCode() {
    return Objects.hash(Arrays.hashCode(active), address, creationTime, email, id, initialPassword, Arrays.hashCode(isEmailVerified), Arrays.hashCode(isLoggedIn), modificationTime, name, password, uniqueId);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ServiceProvider {\n");
    sb.append("    active: ").append(toIndentedString(active)).append("\n");
    sb.append("    address: ").append(toIndentedString(address)).append("\n");
    sb.append("    creationTime: ").append(toIndentedString(creationTime)).append("\n");
    sb.append("    email: ").append(toIndentedString(email)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    initialPassword: ").append(toIndentedString(initialPassword)).append("\n");
    sb.append("    isEmailVerified: ").append(toIndentedString(isEmailVerified)).append("\n");
    sb.append("    isLoggedIn: ").append(toIndentedString(isLoggedIn)).append("\n");
    sb.append("    modificationTime: ").append(toIndentedString(modificationTime)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    password: ").append(toIndentedString(password)).append("\n");
    sb.append("    uniqueId: ").append(toIndentedString(uniqueId)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("active");
    openapiFields.add("address");
    openapiFields.add("creationTime");
    openapiFields.add("email");
    openapiFields.add("id");
    openapiFields.add("initialPassword");
    openapiFields.add("isEmailVerified");
    openapiFields.add("isLoggedIn");
    openapiFields.add("modificationTime");
    openapiFields.add("name");
    openapiFields.add("password");
    openapiFields.add("uniqueId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to ServiceProvider
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!ServiceProvider.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ServiceProvider is not found in the empty JSON string", ServiceProvider.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!ServiceProvider.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `ServiceProvider` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if ((jsonObj.get("address") != null && !jsonObj.get("address").isJsonNull()) && !jsonObj.get("address").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `address` to be a primitive type in the JSON string but got `%s`", jsonObj.get("address").toString()));
      }
      if ((jsonObj.get("email") != null && !jsonObj.get("email").isJsonNull()) && !jsonObj.get("email").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `email` to be a primitive type in the JSON string but got `%s`", jsonObj.get("email").toString()));
      }
      if ((jsonObj.get("initialPassword") != null && !jsonObj.get("initialPassword").isJsonNull()) && !jsonObj.get("initialPassword").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `initialPassword` to be a primitive type in the JSON string but got `%s`", jsonObj.get("initialPassword").toString()));
      }
      if ((jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) && !jsonObj.get("name").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `name` to be a primitive type in the JSON string but got `%s`", jsonObj.get("name").toString()));
      }
      if ((jsonObj.get("password") != null && !jsonObj.get("password").isJsonNull()) && !jsonObj.get("password").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `password` to be a primitive type in the JSON string but got `%s`", jsonObj.get("password").toString()));
      }
      if ((jsonObj.get("uniqueId") != null && !jsonObj.get("uniqueId").isJsonNull()) && !jsonObj.get("uniqueId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `uniqueId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("uniqueId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ServiceProvider.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ServiceProvider' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ServiceProvider> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ServiceProvider.class));

       return (TypeAdapter<T>) new TypeAdapter<ServiceProvider>() {
           @Override
           public void write(JsonWriter out, ServiceProvider value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public ServiceProvider read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of ServiceProvider given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of ServiceProvider
   * @throws IOException if the JSON string is invalid with respect to ServiceProvider
   */
  public static ServiceProvider fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ServiceProvider.class);
  }

  /**
   * Convert an instance of ServiceProvider to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

